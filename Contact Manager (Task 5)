import tkinter as tk
from tkinter import messagebox, simpledialog

class ContactManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Manager")
        self.contacts = []  # List of dicts: {name, phone, email, address}
        self.create_widgets()
        self.refresh_list()

    def create_widgets(self):
        self.root.configure(bg="#232946")
        self.frame = tk.Frame(self.root, padx=20, pady=20, bg="#232946")
        self.frame.pack()

        tk.Label(self.frame, text="Contact Manager", font=("Segoe UI", 18, "bold"), fg="#E9D5DA", bg="#232946").grid(row=0, column=0, columnspan=3, pady=(0,10))

        self.listbox = tk.Listbox(self.frame, width=60, height=10, font=("Segoe UI", 11), bg="#E9D5DA", fg="#232946", selectbackground="#B8C1EC", selectforeground="#232946", borderwidth=0, highlightthickness=0)
        self.listbox.grid(row=1, column=0, columnspan=3, pady=5)
        self.listbox.bind('<<ListboxSelect>>', self.on_select)

        self.add_btn = tk.Button(self.frame, text="Add Contact", width=15, command=self.add_contact, bg="#B8C1EC", fg="#232946", font=("Segoe UI", 10, "bold"), activebackground="#E9D5DA", activeforeground="#232946", borderwidth=0)
        self.add_btn.grid(row=2, column=0, pady=8, sticky="w")
        self.update_btn = tk.Button(self.frame, text="Update Contact", width=15, command=self.update_contact, state=tk.DISABLED, bg="#B8C1EC", fg="#232946", font=("Segoe UI", 10, "bold"), activebackground="#E9D5DA", activeforeground="#232946", borderwidth=0)
        self.update_btn.grid(row=2, column=1, pady=8)
        self.delete_btn = tk.Button(self.frame, text="Delete Contact", width=15, command=self.delete_contact, state=tk.DISABLED, bg="#B8C1EC", fg="#232946", font=("Segoe UI", 10, "bold"), activebackground="#E9D5DA", activeforeground="#232946", borderwidth=0)
        self.delete_btn.grid(row=2, column=2, pady=8, sticky="e")

        tk.Label(self.frame, text="Search:", font=("Segoe UI", 10, "bold"), fg="#E9D5DA", bg="#232946").grid(row=3, column=0, sticky="w", pady=(10,0))
        self.search_entry = tk.Entry(self.frame, width=25, font=("Segoe UI", 10), bg="#E9D5DA", fg="#232946", borderwidth=0)
        self.search_entry.grid(row=3, column=1, sticky="w", pady=(10,0))
        self.search_btn = tk.Button(self.frame, text="Search", command=self.search_contact, bg="#B8C1EC", fg="#232946", font=("Segoe UI", 10, "bold"), activebackground="#E9D5DA", activeforeground="#232946", borderwidth=0)
        self.search_btn.grid(row=3, column=2, sticky="e", pady=(10,0))

        self.details_label = tk.Label(self.frame, text="", font=("Segoe UI", 11), fg="#B8C1EC", bg="#232946")
        self.details_label.grid(row=4, column=0, columnspan=3, sticky="w", pady=(14,0))

    def add_contact(self):
        name = simpledialog.askstring("Add Contact", "Name:")
        if not name:
            return
        phone = simpledialog.askstring("Add Contact", "Phone number:")
        if not phone:
            return
        email = simpledialog.askstring("Add Contact", "Email:")
        address = simpledialog.askstring("Add Contact", "Address:")
        self.contacts.append({"name": name, "phone": phone, "email": email, "address": address})
        self.refresh_list()

    def refresh_list(self, contacts=None):
        self.listbox.delete(0, tk.END)
        show_contacts = contacts if contacts is not None else self.contacts
        for c in show_contacts:
            self.listbox.insert(tk.END, f"{c['name']} | {c['phone']} | {c['email']} | {c['address']}")
        self.update_btn.config(state=tk.DISABLED)
        self.delete_btn.config(state=tk.DISABLED)
        self.details_label.config(text="")

    def on_select(self, event):
        if not self.listbox.curselection():
            self.update_btn.config(state=tk.DISABLED)
            self.delete_btn.config(state=tk.DISABLED)
            self.details_label.config(text="")
            return
        idx = self.listbox.curselection()[0]
        contact = self.contacts[idx]
        self.details_label.config(text=f"Name: {contact['name']}\nPhone: {contact['phone']}\nEmail: {contact['email']}\nAddress: {contact['address']}")
        self.update_btn.config(state=tk.NORMAL)
        self.delete_btn.config(state=tk.NORMAL)

    def search_contact(self):
        query = self.search_entry.get().strip().lower()
        if not query:
            self.refresh_list()
            return
        results = [c for c in self.contacts if query in c['name'].lower() or query in c['phone']]
        self.refresh_list(results)

    def update_contact(self):
        idx = self.listbox.curselection()[0]
        contact = self.contacts[idx]
        name = simpledialog.askstring("Update Contact", "Name:", initialvalue=contact['name'])
        if not name:
            return
        phone = simpledialog.askstring("Update Contact", "Phone number:", initialvalue=contact['phone'])
        if not phone:
            return
        email = simpledialog.askstring("Update Contact", "Email:", initialvalue=contact['email'])
        address = simpledialog.askstring("Update Contact", "Address:", initialvalue=contact['address'])
        self.contacts[idx] = {"name": name, "phone": phone, "email": email, "address": address}
        self.refresh_list()

    def delete_contact(self):
        idx = self.listbox.curselection()[0]
        contact = self.contacts[idx]
        if messagebox.askyesno("Delete Contact", f"Delete {contact['name']}?"):
            del self.contacts[idx]
            self.refresh_list()

def main():
    root = tk.Tk()
    app = ContactManager(root)
    root.mainloop()

if __name__ == "__main__":
    main()
